<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://dacozai.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dacozai.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-05T07:43:58+00:00</updated><id>https://dacozai.github.io/feed.xml</id><title type="html">Dacozai</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">A Little tips and lessons learned from people</title><link href="https://dacozai.github.io/blog/2024/coding-tips/" rel="alternate" type="text/html" title="A Little tips and lessons learned from people"/><published>2024-12-05T07:14:00+00:00</published><updated>2024-12-05T07:14:00+00:00</updated><id>https://dacozai.github.io/blog/2024/coding-tips</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/coding-tips/"><![CDATA[<h2 id="match-problem">Match Problem</h2> <p>Here is the original <a href="https://users.rust-lang.org/t/this-match-feature-is-awful/122046/38">post</a>. Basically, the pain point is that people want to use the match arm but, somehow, OP encountered either typo or non-existed matching. Rust did not alert to the OP. Therefore, it becomes very difficult to find out the problem.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[test]</span>
<span class="k">fn</span> <span class="nf">awful</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">enum</span> <span class="n">Metal</span> <span class="p">{</span>
        <span class="n">Iron</span><span class="p">,</span> <span class="n">Gold</span><span class="p">,</span> <span class="n">Silver</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="k">use</span> <span class="nn">Metal</span><span class="p">::</span><span class="o">*</span><span class="p">;</span>

    <span class="k">let</span> <span class="n">metal</span> <span class="o">=</span> <span class="n">Silver</span><span class="p">;</span>

    <span class="k">let</span> <span class="n">is_gold</span> <span class="o">=</span> <span class="k">match</span> <span class="n">metal</span> <span class="p">{</span>
        <span class="n">Iron</span> <span class="k">=&gt;</span> <span class="k">false</span><span class="p">,</span>
        <span class="n">God</span> <span class="k">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="c1">//&lt;-typo, warning: unused variables</span>
        <span class="n">Awful</span> <span class="k">=&gt;</span> <span class="k">false</span><span class="p">,</span> <span class="c1">//warning: unreachable patterns</span>
        <span class="n">_</span> <span class="k">=&gt;</span> <span class="k">false</span><span class="p">,</span> <span class="c1">//useless, warning: unreachable patterns</span>
    <span class="p">};</span>

    <span class="nd">assert!</span><span class="p">(</span><span class="o">!</span><span class="n">is_gold</span><span class="p">);</span> <span class="c1">//panic: is_gold == true</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="why">Why</h3> <p>Based on the <a href="https://doc.rust-lang.org/book/ch06-02-match.html#catch-all-patterns-and-the-_-placeholder">Match Arm documentation</a>, the next non-matching item will become the so-called <code class="language-plaintext highlighter-rouge">catch-all-patterns</code>. Sometimes, we use <code class="language-plaintext highlighter-rouge">_</code> as the non-binding but match all. But, we can actually use a variable to represent as the match-all. Therefore, it stucks at <strong>God</strong> item which return true.</p> <h3 id="solution">Solution</h3> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
    <span class="n">A</span><span class="p">,</span>
    <span class="n">B</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">foo</span><span class="p">(</span><span class="n">foo</span><span class="p">:</span> <span class="n">Foo</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">use</span> <span class="nn">Foo</span><span class="p">::</span><span class="o">*</span><span class="p">;</span>

    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span> <span class="c1">// only a warning</span>

    <span class="nd">#[deny(unused_variables)]</span>
    <span class="k">match</span> <span class="n">foo</span> <span class="p">{</span>
        <span class="n">A</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"A"</span><span class="p">),</span>
        <span class="n">C</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"B"</span><span class="p">),</span> <span class="c1">// compilation fails with error</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>As the doc mentioned, when we declare to catach-all, it is a binded variable to receive the match arm result. Therefore, we can use the attr called <code class="language-plaintext highlighter-rouge">#[deny(unused_variables)]</code> to force MUST-use of the variable. This is an actual brilliant workaround to solve this pain point!</p>]]></content><author><name></name></author><category term="experience"/><category term="rust"/><summary type="html"><![CDATA[this is a continous updated note that I learn from experience of mine or others]]></summary></entry><entry><title type="html">A fundamental guide</title><link href="https://dacozai.github.io/blog/2024/fundamental-traits/" rel="alternate" type="text/html" title="A fundamental guide"/><published>2024-12-02T12:08:00+00:00</published><updated>2024-12-02T12:08:00+00:00</updated><id>https://dacozai.github.io/blog/2024/fundamental-traits</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/fundamental-traits/"><![CDATA[<h1 id="fundamental-traits">Fundamental Traits</h1> <p>This note wants to guide you to understand these traits and other useful methods that you might encounter frequently. There are many fundamental and useful traits in Rust. It is important to understand then and, in the future, this can help you to understand what othersâ€™ code are writing about.</p> <h1 id="traits">Traits</h1> <h2 id="clone--copy">Clone &amp;&amp; Copy</h2> <p>Probably, the first time learning Rust, these two are the first two that you will encounter. They have more things to talk about but we currently focus on more basic stuffs.</p> <h3 id="clone">Clone</h3> <p><a href="https://doc.rust-lang.org/std/clone/trait.Clone.html">Reference</a> - There are two methods in this trait</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span><span class="p">;</span>
<span class="k">fn</span> <span class="nf">clone_from</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div></div> <p>As mentioned in the documentation, <code class="language-plaintext highlighter-rouge">Clone</code> is always <strong>explicit</strong> and may or may not be <strong>expensive</strong>. Remember that, <code class="language-plaintext highlighter-rouge">Clone</code> is more <code class="language-plaintext highlighter-rouge">general</code> than <code class="language-plaintext highlighter-rouge">Copy</code>.</p> <p>Additionally, <code class="language-plaintext highlighter-rouge">Clone</code> cannot be applied on the dyn trait directly because dyn requires the objects to be <a href="https://doc.rust-lang.org/std/keyword.dyn.html#fnref1">object-safe</a>! The workaround here is adding the extra object safe object to contain the struct. It can be Box, Rc, or else. Here is the <a href="https://stackoverflow.com/a/30353928">example</a>. There is a crate called <a href="https://github.com/dtolnay/dyn-clone">dyn-clone</a> which will be your useful tool as well.</p> <h3 id="copy">Copy</h3> <p><a href="https://doc.rust-lang.org/std/marker/trait.Copy.html">Reference</a> - Mentioned in Clone section, Copy is more restrictive form. <code class="language-plaintext highlighter-rouge">Copy</code> is just a <code class="language-plaintext highlighter-rouge">Marker trait</code> that derives <code class="language-plaintext highlighter-rouge">Clone</code>. The difference here is that, Copy only handles <code class="language-plaintext highlighter-rouge">T</code> that can be <strong>bit-wise copied</strong> and it happens <strong>implicitly</strong>.</p> <blockquote> <p><a href="https://doc.rust-lang.org/std/marker/trait.Copy.html#whats-the-difference-between-copy-and-clone">A Good Explanation</a> - The implementation of Clone can provide any type-specific behavior necessary to duplicate values safely. For example, the implementation of Clone for String needs to copy the pointed-to string buffer in the heap. A simple bitwise copy of String values would merely copy the pointer, leading to a double free down the line. For this reason, String is Clone but not Copy. Note: Copy and Drop are mutually exclusive. Therefore, when a type dervies Drop, it cannot drive Copy <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#stack-only-data-copy">reference</a>. <a href="https://stackoverflow.com/a/66770829">More precisely, Copy means â€œit is safe to bitwise-copy the value and keep using the original value</a>. Last but not least, every move is bitwise-copy, so this is impportant for you to think about designing your code.</p> </blockquote> <h2 id="debug--display">Debug &amp;&amp; Display</h2> <p><a href="https://doc.rust-lang.org/std/fmt/trait.Display.html">Display</a> is similar to <a href="https://doc.rust-lang.org/std/fmt/trait.Debug.html">Debug</a> but <code class="language-plaintext highlighter-rouge">Debug</code> is for debugging usage. Besides, when a type derive <code class="language-plaintext highlighter-rouge">Display</code>, it automatically implement <a href="https://doc.rust-lang.org/std/string/trait.ToString.html">ToString</a>. When a type implements <code class="language-plaintext highlighter-rouge">fmt::Display</code>, it can faithfully be represented as UTF-8 <a href="https://doc.rust-lang.org/std/fmt/index.html#fmtdisplay-vs-fmtdebug">reference</a>. Lastly, <code class="language-plaintext highlighter-rouge">Display</code> is recommned to be implemented compared with <code class="language-plaintext highlighter-rouge">ToString</code>.</p> <p>To Be Continued</p> <h1 id="in-built-fns">In-Built fns</h1>]]></content><author><name></name></author><category term="note"/><category term="rust"/><category term="basic"/><summary type="html"><![CDATA[a note for you and me to crack algorithm in Rust]]></summary></entry><entry><title type="html">A Little Note about Algorithm in Rust</title><link href="https://dacozai.github.io/blog/2024/how-to-rustcode/" rel="alternate" type="text/html" title="A Little Note about Algorithm in Rust"/><published>2024-11-24T02:05:00+00:00</published><updated>2024-11-24T02:05:00+00:00</updated><id>https://dacozai.github.io/blog/2024/how-to-rustcode</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/how-to-rustcode/"><![CDATA[<p>This post is <strong>an algorithm note</strong> to me but I hope this could help others too. My problem source is from <a href="https://leetcode.com/">LeetCode</a>, which is nothing but simple.</p> <h1 id="cheatsheet">CheatSheet</h1> <p>In this section, some useful in-built or template like solution will be listed here. Besides, I will further clarify some misunderstood concepts for people to review before attending the coding interview.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// Sort</span>
<span class="cd">/// Reference -- https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable</span>
<span class="cd">/// There are typcial and useful tips</span>
<span class="k">let</span> <span class="n">arr</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="c1">// NOTE: DEFAULT ordering is **ASC**</span>
<span class="n">arr</span><span class="nf">.sort_unstable</span><span class="p">();</span> <span class="c1">// [-5, -3, 1, 2, 4]</span>
<span class="n">arr</span><span class="nf">.sort_unstable_by</span><span class="p">(|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">|</span> <span class="n">b</span><span class="nf">.cmp</span><span class="p">(</span><span class="n">a</span><span class="p">));</span> <span class="c1">// reverse sorting -&gt; [4, 2, 1, -3, -5]</span>
<span class="c1">// Customised case 1</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">nums</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="n">nums</span><span class="nf">.sort_unstable_by</span><span class="p">(|</span><span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">|</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">one</span> <span class="o">=</span> <span class="nd">format!</span><span class="p">(</span><span class="s">"{s}{t}"</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">two</span> <span class="o">=</span> <span class="nd">format!</span><span class="p">(</span><span class="s">"{t}{s}"</span><span class="p">);</span>
    <span class="n">two</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">one</span><span class="p">)</span>
<span class="p">});</span> <span class="c1">// Output: [5, 34, 3, 30]</span>
<span class="c1">// Customised case 2</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">stk</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span>
    <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
<span class="p">];</span>
<span class="n">stk</span><span class="nf">.sort_unstable_by</span><span class="p">(|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">|</span> <span class="p">{</span>
    <span class="n">b</span><span class="na">.0</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="na">.0</span><span class="p">)</span>                     <span class="c1">// 1. Sort `b.0` descending (reverse order of `a.0` and `b.0`)</span>
        <span class="nf">.then_with</span><span class="p">(||</span> <span class="n">b</span><span class="na">.1</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="na">.1</span><span class="p">))</span>  <span class="c1">// 2. If `b.0 == a.0`, sort `b.1` descending</span>
        <span class="nf">.then_with</span><span class="p">(||</span> <span class="n">b</span><span class="na">.2</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="na">.2</span><span class="p">))</span>  <span class="c1">// 3. If `b.1 == a.1`, sort `b.2` descending</span>
        <span class="nf">.then_with</span><span class="p">(||</span> <span class="n">a</span><span class="na">.3</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="na">.3</span><span class="p">))</span>  <span class="c1">// 4. If `b.2 == a.2`, sort `a.3` ascending</span>
<span class="p">});</span>
<span class="c1">// Output</span>
<span class="c1">// [</span>
<span class="c1">//     (10, 2, 3, 1),</span>
<span class="c1">//     (10, 2, 3, 4),</span>
<span class="c1">//     (10, 2, 1, 3),</span>
<span class="c1">//     (10, 1, 5, 3),</span>
<span class="c1">//     (5, 8, 9, 2),</span>
<span class="c1">// ]</span>

<span class="cd">/// Binary Search</span>
<span class="cd">/// Reference -- https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search</span>
<span class="cd">/// Case 1. locate the position of the given *value*</span>
<span class="cd">///      0  1  2  3  4  5  6  7  8  9   10  11  12</span>
<span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">];</span>
<span class="k">let</span> <span class="n">low</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.partition_point</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">let</span> <span class="n">high</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.partition_point</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">high</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>
<span class="nd">assert!</span><span class="p">((</span><span class="n">low</span><span class="o">..</span><span class="n">high</span><span class="p">)</span><span class="nf">.contains</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="nf">.unwrap</span><span class="p">()));</span>
<span class="cd">/// Case 2. Not Found</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">s</span><span class="nf">.partition_point</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="o">&amp;</span><span class="mi">11</span><span class="p">),</span> <span class="mi">9</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">s</span><span class="nf">.partition_point</span><span class="p">(|</span><span class="n">x</span><span class="p">|</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="o">&amp;</span><span class="mi">11</span><span class="p">),</span> <span class="mi">9</span><span class="p">);</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">s</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="mi">11</span><span class="p">),</span> <span class="nf">Err</span><span class="p">(</span><span class="mi">9</span><span class="p">));</span>
<span class="cd">/// Case 3. Customised condition</span>
<span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">];</span>
<span class="k">let</span> <span class="n">seek</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
<span class="nd">assert_eq!</span><span class="p">(</span><span class="n">s</span><span class="nf">.binary_search_by</span><span class="p">(|</span><span class="n">probe</span><span class="p">|</span> <span class="n">probe</span><span class="nf">.cmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">seek</span><span class="p">)),</span> <span class="nf">Ok</span><span class="p">(</span><span class="mi">9</span><span class="p">));</span>
<span class="cd">/// typical usage</span>
<span class="k">let</span> <span class="n">ss</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">];</span>
<span class="k">let</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="k">let</span> <span class="n">the_index</span> <span class="o">=</span> <span class="n">ss</span><span class="nf">.binary_search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">target</span><span class="p">)</span><span class="nf">.unwrap_or_else</span><span class="p">(|</span><span class="n">insert_index</span><span class="p">|</span> <span class="n">insert_index</span><span class="p">);</span>
<span class="c1">//if not found can be inserted into</span>
<span class="n">ss</span><span class="nf">.insert</span><span class="p">(</span><span class="n">the_index</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>

<span class="cd">/// Match tips</span>
<span class="c1">// match with the condition</span>
<span class="nd">#[allow(dead_code)]</span>
<span class="k">enum</span> <span class="n">Temperature</span> <span class="p">{</span>
    <span class="nf">Celsius</span><span class="p">(</span><span class="nb">i32</span><span class="p">),</span>
    <span class="nf">Fahrenheit</span><span class="p">(</span><span class="nb">i32</span><span class="p">),</span>
<span class="p">}</span>
<span class="k">let</span> <span class="n">temperature</span> <span class="o">=</span> <span class="nn">Temperature</span><span class="p">::</span><span class="nf">Celsius</span><span class="p">(</span><span class="mi">35</span><span class="p">);</span>
<span class="k">match</span> <span class="n">temperature</span> <span class="p">{</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">Celsius</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">if</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="mi">30</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}C is above 30 Celsius"</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span>
    <span class="c1">// The `if condition` part ^ is a guard</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">Celsius</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}C is equal to or below 30 Celsius"</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">Fahrenheit</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">if</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="mi">86</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}F is above 86 Fahrenheit"</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span>
    <span class="nn">Temperature</span><span class="p">::</span><span class="nf">Fahrenheit</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}F is equal to or below 86 Fahrenheit"</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span>
<span class="p">}</span>
<span class="c1">// match with binding</span>
<span class="k">let</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
<span class="k">match</span> <span class="nf">age</span><span class="p">()</span> <span class="p">{</span>
    <span class="mi">0</span>             <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"I haven't celebrated my first birthday yet"</span><span class="p">),</span>
    <span class="n">n</span> <span class="o">@</span> <span class="mi">1</span>  <span class="o">..=</span> <span class="mi">12</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"I'm a child of age {:?}"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
    <span class="n">n</span> <span class="o">@</span> <span class="mi">13</span> <span class="o">..=</span> <span class="mi">19</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"I'm a teen of age {:?}"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
    <span class="n">n</span>             <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"I'm an old person of age {:?}"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
<span class="p">}</span>
<span class="c1">// &gt;&gt;&gt; Tell me what type of person you are</span>
<span class="c1">// &gt;&gt;&gt; I'm a teen of age 15</span>
<span class="k">let</span> <span class="n">some_num</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
<span class="k">match</span> <span class="nf">some_number</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">Some</span><span class="p">(</span><span class="n">n</span> <span class="o">@</span> <span class="mi">42</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"The Answer: {}!"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
    <span class="nf">Some</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>      <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"Not interesting... {}"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
    <span class="n">_</span>            <span class="k">=&gt;</span> <span class="p">(),</span>
<span class="p">}</span>
<span class="c1">// &gt;&gt;&gt; The Answer: 42!</span>

<span class="c1">// let ... else early return</span>
<span class="k">fn</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">head</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="c1">// this is called let ... else syntax for early return, which is valid after Rust 1.65</span>
    <span class="c1">// reference -- https://doc.rust-lang.org/rust-by-example/flow_control/let_else.html</span>
    <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">hh</span><span class="p">)</span> <span class="o">=</span> <span class="n">head</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="k">true</span> <span class="p">};</span>
    <span class="k">false</span>
<span class="p">}</span>

<span class="cd">/// For loop</span>
<span class="cd">///</span>
<span class="cd">/// 1. loop for reference reading</span>
<span class="cd">/// for name in names.iter()</span>
<span class="cd">/// 2. loop and then consume the data source, meaning that elements are moved out from the array</span>
<span class="cd">/// for name in names.into_iter()</span>
<span class="cd">/// 3. loop for mut reference, so that we can modify the element directly</span>
<span class="cd">/// for name in names.iter_mut()</span>
</code></pre></div></div> <h1 id="algorithms">Algorithms</h1> <p>The backbone is based on the interview crash course, <a href="https://leetcode.com/explore/featured/card/leetcodes-interview-crash-course-data-structures-and-algorithms/">Data Structures and Algorithms</a>, from LeetCode. Yes, I recommend this course when you are busy at work and you need a proper way to learn algorithm gradually. Like I said, this is a post about the techniques and remiders to myself. Therefore, it might look incoherent to you unlike the course.</p> <p>But, I will list many useful techniques and why I failed to solve some problems and what was I thinking atm.</p> <h2 id="array-and-strings">Array and strings</h2> <h3 id="array">Array</h3> <h3 id="string">String</h3> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// turn string</span>
<span class="k">let</span> <span class="n">chs</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="sc">'h'</span><span class="p">,</span> <span class="sc">'e'</span><span class="p">,</span> <span class="sc">'l'</span><span class="p">,</span> <span class="sc">'l'</span><span class="p">,</span> <span class="sc">'o'</span><span class="p">];</span>
<span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">chs</span><span class="nf">.into_iter</span><span class="p">()</span><span class="py">.collect</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">();</span>
<span class="k">let</span> <span class="n">bs</span> <span class="o">=</span> <span class="nd">vec!</span><span class="p">[</span><span class="sc">b'h'</span><span class="p">,</span> <span class="sc">b'e'</span><span class="p">,</span> <span class="sc">b'l'</span><span class="p">,</span> <span class="sc">b'l'</span><span class="p">,</span> <span class="sc">b'o'</span><span class="p">];</span>
<span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from_utf8</span><span class="p">(</span><span class="n">bs</span><span class="p">);</span>

<span class="c1">// in-replace for the extended String</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">s</span><span class="nf">.into_bytes</span><span class="p">();</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">chunk_end_i</span> <span class="o">=</span> <span class="n">bytes</span><span class="nf">.len</span><span class="p">();</span>
<span class="n">bytes</span><span class="nf">.extend</span><span class="p">(</span><span class="nn">std</span><span class="p">::</span><span class="nn">iter</span><span class="p">::</span><span class="nf">repeat</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="nf">.take</span><span class="p">(</span><span class="n">spaces</span><span class="nf">.len</span><span class="p">()));</span>

<span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">space</span><span class="p">)</span> <span class="k">in</span> <span class="n">spaces</span><span class="nf">.into_iter</span><span class="p">()</span><span class="nf">.enumerate</span><span class="p">()</span><span class="nf">.rev</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">space</span> <span class="o">=</span> <span class="n">space</span> <span class="k">as</span> <span class="nb">usize</span><span class="p">;</span>
    <span class="n">bytes</span><span class="nf">.copy_within</span><span class="p">(</span><span class="n">space</span><span class="o">..</span><span class="n">chunk_end_i</span><span class="p">,</span> <span class="n">space</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">bytes</span><span class="p">[</span><span class="n">space</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">b' '</span><span class="p">;</span>
    <span class="n">chunk_end_i</span> <span class="o">=</span> <span class="n">space</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">unsafe</span> <span class="p">{</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from_utf8_unchecked</span><span class="p">(</span><span class="n">bytes</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div> <h2 id="linked-list">Linked List</h2> <p>In this section, it is difficult when using Rust because there are more restrictions placed on flow manipulation.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">/// Exalpme Problem - https://leetcode.com/problems/add-two-numbers/description/</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">exec_function</span><span class="p">(</span><span class="n">l1</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">l2</span><span class="p">:</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="c1">// Initialize a dummy node to act as the base of the resulting list</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">base</span> <span class="o">=</span> <span class="n">ListNode</span> <span class="p">{</span> <span class="n">val</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="nb">None</span> <span class="p">};</span>
    <span class="c1">// Get a mutable reference to the dummy node to act as our cursor</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">cursor</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">base</span><span class="p">;</span>

    <span class="c1">// Use `as_ref` to get references to the inner data of `Option&lt;Box&lt;ListNode&gt;&gt;`.</span>
    <span class="c1">// Without `as_ref`, unwrapping would consume the `Option` and move its value,</span>
    <span class="c1">// which we don't want as we only need references.</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">cur_l1</span> <span class="o">=</span> <span class="n">l1</span><span class="nf">.as_ref</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">cur_l2</span> <span class="o">=</span> <span class="n">l2</span><span class="nf">.as_ref</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">carry</span> <span class="o">=</span> <span class="mi">0i32</span><span class="p">;</span>

    <span class="c1">// Iterate as long as there are nodes in either list or a carry remains</span>
    <span class="k">while</span> <span class="n">cur_l1</span><span class="nf">.is_some</span><span class="p">()</span> <span class="p">||</span> <span class="n">cur_l2</span><span class="nf">.is_some</span><span class="p">()</span> <span class="p">||</span> <span class="n">carry</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">next_val</span> <span class="o">=</span> <span class="n">carry</span><span class="p">;</span> <span class="c1">// Start with the carry from the previous operation</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">=</span> <span class="n">cur_l1</span> <span class="p">{</span>
            <span class="n">next_val</span> <span class="o">+=</span> <span class="n">node</span><span class="py">.val</span><span class="p">;</span> <span class="c1">// Add the value from the current node in `l1`</span>
            <span class="n">cur_l1</span> <span class="o">=</span> <span class="n">node</span><span class="py">.next</span><span class="nf">.as_ref</span><span class="p">();</span> <span class="c1">// Move to the next node in `l1`</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nf">Some</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">=</span> <span class="n">cur_l2</span> <span class="p">{</span>
            <span class="n">next_val</span> <span class="o">+=</span> <span class="n">node</span><span class="py">.val</span><span class="p">;</span> <span class="c1">// Add the value from the current node in `l2`</span>
            <span class="n">cur_l2</span> <span class="o">=</span> <span class="n">node</span><span class="py">.next</span><span class="nf">.as_ref</span><span class="p">();</span> <span class="c1">// Move to the next node in `l2`</span>
        <span class="p">}</span>

        <span class="c1">// Create a new node for the current sum (mod 10)</span>
        <span class="k">let</span> <span class="n">the_node</span> <span class="o">=</span> <span class="n">ListNode</span> <span class="p">{</span> <span class="n">val</span><span class="p">:</span> <span class="n">next_val</span> <span class="o">%</span> <span class="mi">10</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="nb">None</span> <span class="p">};</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="n">next_val</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// Update the carry for the next iteration</span>

        <span class="c1">// Assign the new node to `cursor.next` and move the cursor forward</span>
        <span class="n">cursor</span><span class="py">.next</span> <span class="o">=</span> <span class="nf">Some</span><span class="p">(</span><span class="nn">Box</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="n">the_node</span><span class="p">));</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="py">.next</span><span class="nf">.as_mut</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span> <span class="c1">// Advance the cursor to the newly added node</span>
    <span class="p">}</span>

    <span class="n">base</span><span class="py">.next</span> <span class="c1">// Return the resulting list, skipping the dummy node</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="note"/><category term="rust"/><category term="algorithm"/><summary type="html"><![CDATA[a note for you and me to crack algorithm in Rust]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://dacozai.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://dacozai.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Weâ€™re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://dacozai.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://dacozai.github.io/blog/2024/tabs</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="ab3a3d94-dba8-4c23-a99e-aa410ed6a3f4" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="ab3a3d94-dba8-4c23-a99e-aa410ed6a3f4" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="04ebf89d-62cd-4e3f-96c3-c5c2f6642f12" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="04ebf89d-62cd-4e3f-96c3-c5c2f6642f12" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="ca6ae842-10fa-46ae-b79f-f5b102d2c14f" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="ca6ae842-10fa-46ae-b79f-f5b102d2c14f" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://dacozai.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://dacozai.github.io/blog/2024/typograms</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://dacozai.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://dacozai.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://dacozai.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://dacozai.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://dacozai.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://dacozai.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://dacozai.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://dacozai.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://dacozai.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry></feed>